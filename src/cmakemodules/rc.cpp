/*
	Copyright 2010-2014 David "Alemarius Nexus" Lerch

	This file is part of gtatools.

	gtatools is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	gtatools is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with gtatools.  If not, see <http://www.gnu.org/licenses/>.

	Additional permissions are granted, which are listed in the file
	GPLADDITIONS.
 */

//#include <fstream>
//#include <iomanip>
#include <cstring>
#include <cctype>
#include <cstdio>


//using std::ifstream;
//using std::ofstream;

int main(int argc, char** argv)
{
	char* upperAlias = new char[strlen(argv[3])+1];
	
	for (unsigned int i = 0 ; i < strlen(argv[3]) ; i++) {
		upperAlias[i] = toupper(argv[3][i]);
	}
	
	upperAlias[strlen(argv[3])] = '\0';

	FILE* in = fopen(argv[1], "r");
	if (!in) {
		fprintf(stderr, "ERROR: Unable to open input file '%s'!", argv[1]);
		delete[] upperAlias;
		return 1;
	}

	FILE* out = fopen(argv[2], "w");
	if (!out) {
		fprintf(stderr, "ERROR: Unable to open output file '%s'!", argv[2]);
		fclose(in);
		delete[] upperAlias;
		return 1;
	}

	// TODO: Get a proper, system-dependent value
	const char* endl = "\n";
	const char* ind = "\t";

	fprintf(out, "// Automatically compiled from resource file %s%s", argv[1], endl);
	fprintf(out, "// DO NOT EDIT THIS FILE! CHANGES WILL BE LOST UPON RECOMPILATION!%s", endl);
	fprintf(out, "%s", endl);

	fprintf(out, "#ifndef RES_%s_H_%s", upperAlias, endl);
	fprintf(out, "#define RES_%s_H_%s", upperAlias, endl);

	fprintf(out, "static const unsigned char res_%s_data[] = {", argv[3]);

	unsigned char buffer[2048];
	size_t numRead;

	size_t j = 0;

	//while (!in.eof()) {
	while ((numRead = fread(buffer, 1, sizeof(buffer), in)) != 0) {
		for (size_t i = 0 ; i < numRead ; i++) {
			if (j%20 == 0) {
				fprintf(out, "%s%s", endl, ind);
			}

			fprintf(out, "0x%02X, ", (unsigned int) buffer[i]);
			j++;
		}
	}

	// Add terminating zero byte
	fprintf(out, "%s%s%s0x00 // Null terminator, not part of actual data", endl, endl, ind);

	fprintf(out, "%s};%s", endl, endl);
	fprintf(out, "%s", endl);

	fprintf(out, "#define res_%s_size (sizeof(res_%s_data) - 1)%s", argv[3], argv[3], endl);
	fprintf(out, "#define res_%s_asCString() (CString::readAlias((const char*) res_%s_data, res_%s_size))%s",
			argv[3], argv[3], argv[3], endl);
	fprintf(out, "#define res_%s_asByteArray() (ByteArray::readAlias((const char*) res_%s_data, res_%s_size))%s",
			argv[3], argv[3], argv[3], endl);
	fprintf(out, "%s", endl);

	fprintf(out, "#endif%s", endl);

	fflush(out);

	fclose(out);
	fclose(in);

	/*ifstream in(argv[1], ifstream::in | ifstream::binary);

	if (in.fail()) {
		fprintf(stderr, "ERROR: Input file %s does not exist!", argv[1]);
		return 1;
	}

	ofstream out(argv[2]);

	out << "// Automatically compiled from resource file " << argv[1] << std::endl;
	out << "// DO NOT EDIT THIS FILE! CHANGES WILL BE LOST UPON RECOMPILATION!" << std::endl << std::endl;
	
	out << "#ifndef RES_" << upperAlias << "_H_" << std::endl;
	out << "#define RES_" << upperAlias << "_H_" << std::endl;

	out << "static const unsigned char res_" << argv[3] << "_data[] = {";
	out << std::hex << std::setfill('0') << std::setw(2) << std::showbase << std::internal;
	
	unsigned char buffer[2048];
	
	int j = 0;
	
	while (!in.eof()) {
		in.read((char*) buffer, sizeof(buffer));
		
		for (int i = 0 ; i < in.gcount() ; i++) {
			if (j%20 == 0) {
				out << std::endl << "\t";
			}
			
			out << (int) buffer[i] << ", ";
			j++;
		}
		
		out.flush();
	}
	
	// Add terminating zero byte
	out << std::endl << "\t0x0";

	out << std::endl << "};" << std::endl;
	out << "#define res_" << argv[3] << "_size (sizeof(res_" << argv[3] << "_data) - 1)" << std::endl;
	out << "#define res_" << argv[3] << "_asCString() "
			<< "(CString::readAlias((const char*) res_" << argv[3] << "_data, res_" << argv[3] << "_size))" << std::endl;
	out << "#define res_" << argv[3] << "_asByteArray() "
			<< "(ByteArray::readAlias((const char*) res_" << argv[3] << "_data, res_" << argv[3] << "_size))" << std::endl;
	
	out << "#endif" << std::endl;
	
	out.flush();
	
	out.close();
	in.close();*/
	
	delete[] upperAlias;
	
	printf("Success");
	
	return 0;
}
